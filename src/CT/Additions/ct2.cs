// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ct.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using pb = global::Google.Protobuf;
using pbr = global::Google.Protobuf.Reflection;
namespace CT.Additions
{

    /// <summary>Holder for reflection information generated from ct.proto</summary>
    public static partial class CT
    {

        #region Descriptor
        /// <summary>File descriptor for ct.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static CT()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CghjdC5wcm90bxIcVGVzdFRvb2xUaXBzLkRyb2lkLkNULnByb3RvYyLyAgoP",
                  "RGlnaXRhbGx5U2lnbmVkElMKDmhhc2hfYWxnb3JpdGhtGAEgASgOMjsuVGVz",
                  "dFRvb2xUaXBzLkRyb2lkLkNULnByb3RvYy5EaWdpdGFsbHlTaWduZWQuSGFz",
                  "aEFsZ29yaXRobRJXCg1zaWdfYWxnb3JpdGhtGAIgASgOMkAuVGVzdFRvb2xU",
                  "aXBzLkRyb2lkLkNULnByb3RvYy5EaWdpdGFsbHlTaWduZWQuU2lnbmF0dXJl",
                  "QWxnb3JpdGhtEhEKCXNpZ25hdHVyZRgDIAEoDCJcCg1IYXNoQWxnb3JpdGht",
                  "EggKBE5PTkUQABIHCgNNRDUQARIICgRTSEExEAISCgoGU0hBMjI0EAMSCgoG",
                  "U0hBMjU2EAQSCgoGU0hBMzg0EAUSCgoGU0hBNTEyEAYiQAoSU2lnbmF0dXJl",
                  "QWxnb3JpdGhtEg0KCUFOT05ZTU9VUxAAEgcKA1JTQRABEgcKA0RTQRACEgkK",
                  "BUVDRFNBEAMiFwoFTG9nSUQSDgoGa2V5X2lkGAEgASgMIu4BChpTaWduZWRD",
                  "ZXJ0aWZpY2F0ZVRpbWVzdGFtcBI2Cgd2ZXJzaW9uGAEgASgOMiUuVGVzdFRv",
                  "b2xUaXBzLkRyb2lkLkNULnByb3RvYy5WZXJzaW9uEi8KAmlkGAIgASgLMiMu",
                  "VGVzdFRvb2xUaXBzLkRyb2lkLkNULnByb3RvYy5Mb2dJRBIRCgl0aW1lc3Rh",
                  "bXAYAyABKAQSQAoJc2lnbmF0dXJlGAQgASgLMi0uVGVzdFRvb2xUaXBzLkRy",
                  "b2lkLkNULnByb3RvYy5EaWdpdGFsbHlTaWduZWQSEgoKZXh0ZW5zaW9ucxgF",
                  "IAEoDCpLCgxMb2dFbnRyeVR5cGUSDgoKWDUwOV9FTlRSWRAAEhEKDVBSRUNF",
                  "UlRfRU5UUlkQARIYChJVTktOT1dOX0VOVFJZX1RZUEUQgIAEKicKB1ZlcnNp",
                  "b24SBgoCVjEQABIUCg9VTktOT1dOX1ZFUlNJT04QgAJCH6oCHFRlc3RUb29s",
                  "VGlwcy5Ecm9pZC5DVC5wcm90b2NiBnByb3RvMw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(LogEntryType), typeof(Version), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(DigitallySigned), DigitallySigned.Parser, new[]{ "HashAlgorithm", "SigAlgorithm", "Signature" }, null, new[]{ typeof(DigitallySigned.Types.HashAlgorithm), typeof(DigitallySigned.Types.SignatureAlgorithm) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(LogID), LogID.Parser, new[]{ "KeyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(SignedCertificateTimestamp), SignedCertificateTimestamp.Parser, new[]{ "Version", "Id", "Timestamp", "Signature", "Extensions" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum LogEntryType
    {
        [pbr::OriginalName("X509_ENTRY")] X509Entry = 0,
        [pbr::OriginalName("PRECERT_ENTRY")] PrecertEntry = 1,
        /// <summary>
        /// Not part of the I-D, and outside the valid range.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_ENTRY_TYPE")] UnknownEntryType = 65536,
    }

    public enum Version
    {
        [pbr::OriginalName("V1")] V1 = 0,
        /// <summary>
        /// Not part of the I-D, and outside the valid range.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_VERSION")] UnknownVersion = 256,
    }

    #endregion

    #region Messages
    /// <summary>
    /// RFC 5246
    /// </summary>
    public sealed partial class DigitallySigned : pb::IMessage<DigitallySigned>
    {
        private static readonly pb::MessageParser<DigitallySigned> _parser = new pb::MessageParser<DigitallySigned>(() => new DigitallySigned());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DigitallySigned> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return CT.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitallySigned()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitallySigned(DigitallySigned other) : this()
        {
            hashAlgorithm_ = other.hashAlgorithm_;
            sigAlgorithm_ = other.sigAlgorithm_;
            signature_ = other.signature_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitallySigned Clone()
        {
            return new DigitallySigned(this);
        }

        /// <summary>Field number for the "hash_algorithm" field.</summary>
        public const int HashAlgorithmFieldNumber = 1;
        private DigitallySigned.Types.HashAlgorithm hashAlgorithm_ = 0;
        /// <summary>
        /// 1 byte
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitallySigned.Types.HashAlgorithm HashAlgorithm
        {
            get { return hashAlgorithm_; }
            set
            {
                hashAlgorithm_ = value;
            }
        }

        /// <summary>Field number for the "sig_algorithm" field.</summary>
        public const int SigAlgorithmFieldNumber = 2;
        private DigitallySigned.Types.SignatureAlgorithm sigAlgorithm_ = 0;
        /// <summary>
        /// 1 byte
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitallySigned.Types.SignatureAlgorithm SigAlgorithm
        {
            get { return sigAlgorithm_; }
            set
            {
                sigAlgorithm_ = value;
            }
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 3;
        private pb::ByteString signature_ = pb::ByteString.Empty;
        /// <summary>
        /// 0..2^16-1 bytes
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Signature
        {
            get { return signature_; }
            set
            {
                signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DigitallySigned);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DigitallySigned other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (HashAlgorithm != other.HashAlgorithm) return false;
            if (SigAlgorithm != other.SigAlgorithm) return false;
            if (Signature != other.Signature) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HashAlgorithm != 0) hash ^= HashAlgorithm.GetHashCode();
            if (SigAlgorithm != 0) hash ^= SigAlgorithm.GetHashCode();
            if (Signature.Length != 0) hash ^= Signature.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HashAlgorithm != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)HashAlgorithm);
            }
            if (SigAlgorithm != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)SigAlgorithm);
            }
            if (Signature.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteBytes(Signature);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HashAlgorithm != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)HashAlgorithm);
            }
            if (SigAlgorithm != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SigAlgorithm);
            }
            if (Signature.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DigitallySigned other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HashAlgorithm != 0)
            {
                HashAlgorithm = other.HashAlgorithm;
            }
            if (other.SigAlgorithm != 0)
            {
                SigAlgorithm = other.SigAlgorithm;
            }
            if (other.Signature.Length != 0)
            {
                Signature = other.Signature;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            hashAlgorithm_ = (DigitallySigned.Types.HashAlgorithm)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            sigAlgorithm_ = (DigitallySigned.Types.SignatureAlgorithm)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            Signature = input.ReadBytes();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DigitallySigned message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum HashAlgorithm
            {
                [pbr::OriginalName("NONE")] None = 0,
                [pbr::OriginalName("MD5")] Md5 = 1,
                [pbr::OriginalName("SHA1")] Sha1 = 2,
                [pbr::OriginalName("SHA224")] Sha224 = 3,
                [pbr::OriginalName("SHA256")] Sha256 = 4,
                [pbr::OriginalName("SHA384")] Sha384 = 5,
                [pbr::OriginalName("SHA512")] Sha512 = 6,
            }

            public enum SignatureAlgorithm
            {
                [pbr::OriginalName("ANONYMOUS")] Anonymous = 0,
                [pbr::OriginalName("RSA")] Rsa = 1,
                [pbr::OriginalName("DSA")] Dsa = 2,
                [pbr::OriginalName("ECDSA")] Ecdsa = 3,
            }

        }
        #endregion

    }

    public sealed partial class LogID : pb::IMessage<LogID>
    {
        private static readonly pb::MessageParser<LogID> _parser = new pb::MessageParser<LogID>(() => new LogID());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LogID> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return CT.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogID()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogID(LogID other) : this()
        {
            keyId_ = other.keyId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogID Clone()
        {
            return new LogID(this);
        }

        /// <summary>Field number for the "key_id" field.</summary>
        public const int KeyIdFieldNumber = 1;
        private pb::ByteString keyId_ = pb::ByteString.Empty;
        /// <summary>
        /// 32 bytes
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString KeyId
        {
            get { return keyId_; }
            set
            {
                keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LogID);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LogID other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (KeyId != other.KeyId) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
            return hash;
        }

        internal object getSignatureAlgorithm()
        {
            throw new NotImplementedException();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (KeyId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(KeyId);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (KeyId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeyId);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LogID other)
        {
            if (other == null)
            {
                return;
            }
            if (other.KeyId.Length != 0)
            {
                KeyId = other.KeyId;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            KeyId = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SignedCertificateTimestamp : pb::IMessage<SignedCertificateTimestamp>
    {
        private static readonly pb::MessageParser<SignedCertificateTimestamp> _parser = new pb::MessageParser<SignedCertificateTimestamp>(() => new SignedCertificateTimestamp());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SignedCertificateTimestamp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return CT.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignedCertificateTimestamp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignedCertificateTimestamp(SignedCertificateTimestamp other) : this()
        {
            version_ = other.version_;
            Id = other.id_ != null ? other.Id.Clone() : null;
            timestamp_ = other.timestamp_;
            Signature = other.signature_ != null ? other.Signature.Clone() : null;
            extensions_ = other.extensions_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignedCertificateTimestamp Clone()
        {
            return new SignedCertificateTimestamp(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;
        private Version version_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Version
        {
            get { return version_; }
            set
            {
                version_ = value;
            }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 2;
        private LogID id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogID Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private ulong timestamp_;
        /// <summary>
        /// UTC time in milliseconds, since January 1, 1970, 00:00.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 4;
        private DigitallySigned signature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitallySigned Signature
        {
            get { return signature_; }
            set
            {
                signature_ = value;
            }
        }

        /// <summary>Field number for the "extensions" field.</summary>
        public const int ExtensionsFieldNumber = 5;
        private pb::ByteString extensions_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Extensions
        {
            get { return extensions_; }
            set
            {
                extensions_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SignedCertificateTimestamp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SignedCertificateTimestamp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Version != other.Version) return false;
            if (!object.Equals(Id, other.Id)) return false;
            if (Timestamp != other.Timestamp) return false;
            if (!object.Equals(Signature, other.Signature)) return false;
            if (Extensions != other.Extensions) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Version != 0) hash ^= Version.GetHashCode();
            if (id_ != null) hash ^= Id.GetHashCode();
            if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
            if (signature_ != null) hash ^= Signature.GetHashCode();
            if (Extensions.Length != 0) hash ^= Extensions.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Version != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Version);
            }
            if (id_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Id);
            }
            if (Timestamp != 0UL)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(Timestamp);
            }
            if (signature_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Signature);
            }
            if (Extensions.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteBytes(Extensions);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Version != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Version);
            }
            if (id_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
            }
            if (Timestamp != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
            }
            if (signature_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
            }
            if (Extensions.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Extensions);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SignedCertificateTimestamp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Version != 0)
            {
                Version = other.Version;
            }
            if (other.id_ != null)
            {
                if (id_ == null)
                {
                    id_ = new LogID();
                }
                Id.MergeFrom(other.Id);
            }
            if (other.Timestamp != 0UL)
            {
                Timestamp = other.Timestamp;
            }
            if (other.signature_ != null)
            {
                if (signature_ == null)
                {
                    signature_ = new DigitallySigned();
                }
                Signature.MergeFrom(other.Signature);
            }
            if (other.Extensions.Length != 0)
            {
                Extensions = other.Extensions;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            version_ = (Version)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            if (id_ == null)
                            {
                                id_ = new LogID();
                            }
                            input.ReadMessage(id_);
                            break;
                        }
                    case 24:
                        {
                            Timestamp = input.ReadUInt64();
                            break;
                        }
                    case 34:
                        {
                            if (signature_ == null)
                            {
                                signature_ = new DigitallySigned();
                            }
                            input.ReadMessage(signature_);
                            break;
                        }
                    case 42:
                        {
                            Extensions = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code